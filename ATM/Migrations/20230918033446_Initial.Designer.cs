// <auto-generated />
using System;
using ATM.Infrastructure.Persistence.EntityMapping;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ATM.Migrations
{
    [DbContext(typeof(ATMContext))]
    [Migration("20230918033446_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ATM.Core.Domain.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.Property<DateTime?>("LastWithdrawalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountNumber = 12345678,
                            Balance = 9000f,
                            LastWithdrawalDate = new DateTime(2023, 8, 18, 0, 34, 46, 154, DateTimeKind.Local).AddTicks(3316),
                            Username = "Bruce Wayne"
                        },
                        new
                        {
                            Id = 2,
                            AccountNumber = 98765432,
                            Balance = 450f,
                            LastWithdrawalDate = new DateTime(2023, 7, 18, 0, 34, 46, 154, DateTimeKind.Local).AddTicks(3337),
                            Username = "Indiana Jones"
                        },
                        new
                        {
                            Id = 3,
                            AccountNumber = 11111110,
                            Balance = 1800f,
                            LastWithdrawalDate = new DateTime(2023, 6, 18, 0, 34, 46, 154, DateTimeKind.Local).AddTicks(3338),
                            Username = "Darth Vader"
                        },
                        new
                        {
                            Id = 4,
                            AccountNumber = 22222220,
                            Balance = 675f,
                            LastWithdrawalDate = new DateTime(2023, 5, 18, 0, 34, 46, 154, DateTimeKind.Local).AddTicks(3339),
                            Username = "Jack Sparrow"
                        },
                        new
                        {
                            Id = 5,
                            AccountNumber = 33333333,
                            Balance = 1050f,
                            LastWithdrawalDate = new DateTime(2023, 4, 18, 0, 34, 46, 154, DateTimeKind.Local).AddTicks(3340),
                            Username = "John Rambo"
                        },
                        new
                        {
                            Id = 6,
                            AccountNumber = 44444444,
                            Balance = 270f,
                            LastWithdrawalDate = new DateTime(2023, 3, 18, 0, 34, 46, 154, DateTimeKind.Local).AddTicks(3342),
                            Username = "Peter Parker"
                        });
                });

            modelBuilder.Entity("ATM.Core.Domain.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FailedAttempts")
                        .HasColumnType("int");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<short>("Pin")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            CardNumber = "111222333444",
                            FailedAttempts = 0,
                            IsLocked = false,
                            Pin = (short)1234
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 2,
                            CardNumber = "555666777888",
                            FailedAttempts = 0,
                            IsLocked = false,
                            Pin = (short)5678
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 3,
                            CardNumber = "999888777666",
                            FailedAttempts = 0,
                            IsLocked = false,
                            Pin = (short)9876
                        },
                        new
                        {
                            Id = 4,
                            AccountId = 4,
                            CardNumber = "333222111000",
                            FailedAttempts = 0,
                            IsLocked = false,
                            Pin = (short)3210
                        },
                        new
                        {
                            Id = 5,
                            AccountId = 5,
                            CardNumber = "777666555444",
                            FailedAttempts = 0,
                            IsLocked = false,
                            Pin = (short)7654
                        },
                        new
                        {
                            Id = 6,
                            AccountId = 6,
                            CardNumber = "222333444555",
                            FailedAttempts = 0,
                            IsLocked = false,
                            Pin = (short)2345
                        });
                });

            modelBuilder.Entity("ATM.Core.Domain.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<float>("BalanceAfter")
                        .HasColumnType("real");

                    b.Property<float?>("BalanceBefore")
                        .HasColumnType("real");

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1000f,
                            BalanceAfter = 9000f,
                            BalanceBefore = 10000f,
                            CardId = 1,
                            TransactionDate = new DateTime(2023, 9, 18, 0, 34, 46, 154, DateTimeKind.Local).AddTicks(3385),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 50f,
                            BalanceAfter = 450f,
                            BalanceBefore = 500f,
                            CardId = 2,
                            TransactionDate = new DateTime(2023, 9, 18, 0, 34, 46, 154, DateTimeKind.Local).AddTicks(3387),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 200f,
                            BalanceAfter = 1800f,
                            BalanceBefore = 2000f,
                            CardId = 3,
                            TransactionDate = new DateTime(2023, 9, 18, 0, 34, 46, 154, DateTimeKind.Local).AddTicks(3388),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = 4,
                            Amount = 75f,
                            BalanceAfter = 675f,
                            BalanceBefore = 750f,
                            CardId = 4,
                            TransactionDate = new DateTime(2023, 9, 18, 0, 34, 46, 154, DateTimeKind.Local).AddTicks(3389),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = 5,
                            Amount = 150f,
                            BalanceAfter = 1050f,
                            BalanceBefore = 1200f,
                            CardId = 5,
                            TransactionDate = new DateTime(2023, 9, 18, 0, 34, 46, 154, DateTimeKind.Local).AddTicks(3389),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = 6,
                            Amount = 30f,
                            BalanceAfter = 270f,
                            BalanceBefore = 300f,
                            CardId = 6,
                            TransactionDate = new DateTime(2023, 9, 18, 0, 34, 46, 154, DateTimeKind.Local).AddTicks(3391),
                            TransactionType = 1
                        });
                });

            modelBuilder.Entity("ATM.Core.Domain.Card", b =>
                {
                    b.HasOne("ATM.Core.Domain.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ATM.Core.Domain.Transaction", b =>
                {
                    b.HasOne("ATM.Core.Domain.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });
#pragma warning restore 612, 618
        }
    }
}
